apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  creationTimestamp: null
  name: portfolio
spec:
  replicas: 1
  strategy: {}
  template:
    metadata:
      annotations:
        sidecar.istio.io/status: '{"version":"3f967e35dc2aa7ac3c6670f6f5129f1c2762f3bdc2930e2d016f3d9d8f423e36","initContainers":["istio-init"],"containers":["istio-proxy"],"volumes":["istio-envoy","istio-certs"],"imagePullSecrets":null}'
      creationTimestamp: null
      labels:
        app: portfolio
        solution: stock-trader
    spec:
      containers:
      - env:
        - name: JDBC_HOST
          valueFrom:
            secretKeyRef:
              key: host
              name: db2
        - name: JDBC_PORT
          valueFrom:
            secretKeyRef:
              key: port
              name: db2
        - name: JDBC_DB
          valueFrom:
            secretKeyRef:
              key: db
              name: db2
        - name: JDBC_ID
          valueFrom:
            secretKeyRef:
              key: id
              name: db2
        - name: JDBC_PASSWORD
          valueFrom:
            secretKeyRef:
              key: pwd
              name: db2
        - name: MQ_ID
          valueFrom:
            secretKeyRef:
              key: id
              name: mq
        - name: MQ_PASSWORD
          valueFrom:
            secretKeyRef:
              key: pwd
              name: mq
        - name: MQ_HOST
          valueFrom:
            secretKeyRef:
              key: host
              name: mq
        - name: MQ_PORT
          valueFrom:
            secretKeyRef:
              key: port
              name: mq
        - name: MQ_CHANNEL
          valueFrom:
            secretKeyRef:
              key: channel
              name: mq
        - name: MQ_QUEUE_MANAGER
          valueFrom:
            secretKeyRef:
              key: queue-manager
              name: mq
        - name: MQ_QUEUE
          valueFrom:
            secretKeyRef:
              key: queue
              name: mq
        - name: WATSON_URL
          valueFrom:
            secretKeyRef:
              key: url
              name: watson
        - name: WATSON_ID
          valueFrom:
            secretKeyRef:
              key: id
              name: watson
              optional: true
        - name: WATSON_PWD
          valueFrom:
            secretKeyRef:
              key: pwd
              name: watson
        - name: ODM_URL
          valueFrom:
            secretKeyRef:
              key: url
              name: odm
              optional: true
        - name: ODM_ID
          valueFrom:
            secretKeyRef:
              key: id
              name: odm
              optional: true
        - name: ODM_PWD
          valueFrom:
            secretKeyRef:
              key: pwd
              name: odm
              optional: true
        - name: KAFKA_TOPIC
          valueFrom:
            secretKeyRef:
              key: topic
              name: kafka
              optional: true
        - name: KAFKA_ADDRESS
          valueFrom:
            secretKeyRef:
              key: address
              name: kafka
              optional: true
        - name: KAFKA_USER
          valueFrom:
            secretKeyRef:
              key: user
              name: kafka
              optional: true
        - name: KAFKA_API_KEY
          valueFrom:
            secretKeyRef:
              key: api-key
              name: kafka
              optional: true
        - name: KAFKA_KEYSTORE
          valueFrom:
            secretKeyRef:
              key: keystore
              name: kafka
              optional: true
        - name: JWT_AUDIENCE
          valueFrom:
            secretKeyRef:
              key: audience
              name: jwt
        - name: JWT_ISSUER
          valueFrom:
            secretKeyRef:
              key: issuer
              name: jwt
        image: bigloon.icp:8500/stock-trader/portfolio:demo
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /health
            port: 9080
          initialDelaySeconds: 60
          periodSeconds: 5
        name: portfolio
        ports:
        - containerPort: 9080
        - containerPort: 9443
        readinessProbe:
          httpGet:
            path: /health
            port: 9080
          initialDelaySeconds: 30
          periodSeconds: 5
        resources:
          limits:
            cpu: 500m
            memory: 500Mi
          requests:
            cpu: 100m
            memory: 128Mi
        volumeMounts:
        - mountPath: /keystores
          name: kafka-keystore-volume
          readOnly: true
      - args:
        - proxy
        - sidecar
        - --configPath
        - /etc/istio/proxy
        - --binaryPath
        - /usr/local/bin/envoy
        - --serviceCluster
        - portfolio
        - --drainDuration
        - 45s
        - --parentShutdownDuration
        - 1m0s
        - --discoveryAddress
        - istio-pilot.istio-system:15007
        - --discoveryRefreshDelay
        - 1s
        - --zipkinAddress
        - zipkin.istio-system:9411
        - --connectTimeout
        - 10s
        - --statsdUdpAddress
        - istio-statsd-prom-bridge.istio-system:9125
        - --proxyAdminPort
        - "15000"
        - --controlPlaneAuthPolicy
        - NONE
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: INSTANCE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: ISTIO_META_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: ISTIO_META_INTERCEPTION_MODE
          value: REDIRECT
        image: ibmcom/istio-proxyv2:1.0.2
        imagePullPolicy: IfNotPresent
        name: istio-proxy
        resources:
          requests:
            cpu: 10m
        securityContext:
          readOnlyRootFilesystem: true
          runAsUser: 1337
        volumeMounts:
        - mountPath: /etc/istio/proxy
          name: istio-envoy
        - mountPath: /etc/certs/
          name: istio-certs
          readOnly: true
      initContainers:
      - args:
        - -p
        - "15001"
        - -u
        - "1337"
        - -m
        - REDIRECT
        - -i
        - '*'
        - -x
        - ""
        - -b
        - 9080, 9443,
        - -d
        - ""
        image: ibmcom/istio-proxy_init:1.0.2
        imagePullPolicy: IfNotPresent
        name: istio-init
        resources: {}
        securityContext:
          capabilities:
            add:
            - NET_ADMIN
      volumes:
      - name: kafka-keystore-volume
        secret:
          secretName: kafka-keystore
      - emptyDir:
          medium: Memory
        name: istio-envoy
      - name: istio-certs
        secret:
          optional: true
          secretName: istio.default
status: {}
---
#Deploy the service
apiVersion: v1
kind: Service
metadata:
  name: portfolio-service
  labels:
    app: portfolio
spec:
  type: NodePort
  ports:
    - name: http
      protocol: TCP
      port: 9080
      targetPort: 9080
    - name: https
      protocol: TCP
      port: 9443
      targetPort: 9443
  selector:
    app: portfolio
---
#Configure the ingress 
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: "nginx"
    ingress.kubernetes.io/affinity: "cookie"
    ingress.kubernetes.io/session-cookie-name: "route"
    ingress.kubernetes.io/session-cookie-hash: "sha1"
    ingress.kubernetes.io/secure-backends: "true"
    ingress.kubernetes.io/app-root: "/portfolio"
  name: portfolio-ingress
spec:
  rules:
  - host:
    http:
      paths:
      - path: /portfolio
        backend:
          serviceName: portfolio-service
          servicePort: 9443
---
